{"version":3,"file":"static/js/825.4de207f3dee2c777d02b.js","mappings":"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","sources":["webpack://windows-rs.web.features/./src/worker/search_utils.ts","webpack://windows-rs.web.features/./src/worker/search_v1.ts","webpack://windows-rs.web.features/./src/worker/search_v2.ts","webpack://windows-rs.web.features/./src/worker/search.ts","webpack://windows-rs.web.features/./src/worker/worker.ts"],"sourcesContent":["import { SearchResult } from './search';\n\n// Sorts results by match position and suffix length.\n// \"createprocess\" in \"CreateProcess\" beats \"SHCREATEPROCESSINFOW\".\n// \"createprocess\" in \"CreateProcessW\" beats \"CreateProcessWithTokenW\".\nexport function sortSearchResults(results: SearchResult[], query: string) {\n    return results.sort((a, b) => {\n        const query_lower = query.toLowerCase();\n        const a_lower = a.name.toLowerCase();\n        const b_lower = b.name.toLowerCase();\n\n        const pos_a = a_lower.indexOf(query_lower);\n        const pos_b = b_lower.indexOf(query_lower);\n\n        if (pos_a !== pos_b) {\n            return pos_a - pos_b;\n        }\n\n        const suffix_len_a = a.name.length - (pos_a + query.length);\n        const suffix_len_b = b.name.length - (pos_b + query.length);\n        return suffix_len_a - suffix_len_b;\n    });\n}\n","import { SearchQuery, SearchResultSummary } from './search';\nimport { sortSearchResults } from './search_utils';\n\nexport type SearchIndexV1 = {\n    namespace_map: string[];\n    feature_map: string[];\n    namespaces: {\n        [key: string]: {\n            name: string;\n            features: number[];\n        }[];\n    };\n};\n\nexport class SearchV1 {\n    private _searchIndex: SearchIndexV1;\n\n    constructor(searchIndex: SearchIndexV1) {\n        this._searchIndex = searchIndex;\n    }\n\n    For(query: SearchQuery): SearchResultSummary {\n        const summary: SearchResultSummary = {\n            truncated: false,\n            results: [],\n        };\n\n        if (this._searchIndex === undefined) {\n            throw new Error('Search index has not been initialized.');\n        }\n\n        const namespaces = this._searchIndex.namespaces;\n        for (const namespace in namespaces) {\n            for (const item of namespaces[namespace]!) {\n                if (summary.results.length >= 50) {\n                    summary.truncated = true;\n                    break;\n                }\n\n                const full_namespace = this._searchIndex.namespace_map[\n                    Number.parseInt(namespace)\n                ]!.replace('Windows.', '').replace(/\\./g, '::');\n\n                const full_name = full_namespace + '::' + item.name;\n                let hit = false;\n                try {\n                    hit = new RegExp(query, 'i').test(full_name);\n                } catch {\n                    hit = full_name.includes(query);\n                }\n\n                if (hit) {\n                    let features: string[] = item.features.map(\n                        (idx) => this._searchIndex!.feature_map[idx]!\n                    );\n\n                    features = features.filter(\n                        (f) => f !== 'Foundation' && f !== 'Win32_Foundation'\n                    );\n\n                    summary.results.push({\n                        name: item.name,\n                        namespace: full_namespace,\n                        features: features,\n                    });\n                }\n            }\n        }\n\n        summary.results = sortSearchResults(summary.results, query);\n        return summary;\n    }\n}\n","import { SearchQuery, SearchResultSummary } from './search';\nimport { sortSearchResults } from './search_utils';\n\nexport type SearchIndexV2 = {\n    version: number;\n    namespaces: string[];\n    items: {\n        [key: string]: Array<{ name: string; features: number[] }>;\n    };\n};\n\nexport type CompressedSearchIndexV2 = {\n    version: number;\n    namespaces: string[];\n    items: {\n        [key: string]: Array<{ n: string; f: number[] }>;\n    };\n};\n\nexport class SearchV2 {\n    private _searchIndex: SearchIndexV2 | undefined;\n\n    constructor(json: CompressedSearchIndexV2) {\n        this._searchIndex = {\n            version: json.version,\n            namespaces: json.namespaces,\n            items: Object.fromEntries(\n                Object.entries(json.items).map(([key, value]) => [\n                    key,\n                    (value as Array<{ n: string; f: number[] }>).map((item) => ({\n                        name: item.n.replace(/\\./g, '::'),\n                        features: item.f,\n                    })),\n                ])\n            ),\n        } as SearchIndexV2;\n    }\n\n    For(query: SearchQuery): SearchResultSummary {\n        const summary: SearchResultSummary = {\n            truncated: false,\n            results: [],\n        };\n\n        if (this._searchIndex === undefined) {\n            throw new Error('Search index has not been initialized.');\n        }\n\n        for (const [namespace, items] of Object.entries(this._searchIndex.items)) {\n            for (const item of items) {\n                if (summary.results.length >= 50) {\n                    summary.truncated = true;\n                    break;\n                }\n\n                const full_namespace = this._searchIndex.namespaces[\n                    Number.parseInt(namespace)\n                ]!.replace('Windows.', '').replace(/\\./g, '::');\n\n                const full_name = full_namespace + '::' + item.name;\n                let hit = false;\n                try {\n                    hit = new RegExp(query, 'i').test(full_name);\n                } catch {\n                    hit = full_name.includes(query);\n                }\n\n                if (hit) {\n                    let features: string[] = item.features.map((idx) =>\n                        this._searchIndex!.namespaces[idx]!.replace('Windows.', '').replace(\n                            /\\./g,\n                            '_'\n                        )\n                    );\n\n                    features = features.filter(\n                        (f) => f !== 'Foundation' && f !== 'Win32_Foundation'\n                    );\n\n                    summary.results.push({\n                        name: item.name,\n                        namespace: full_namespace,\n                        features: features,\n                    });\n                }\n            }\n        }\n\n        summary.results = sortSearchResults(summary.results, query);\n        return summary;\n    }\n}\n","import { SearchV1 } from './search_v1';\nimport { SearchV2 } from './search_v2';\n\nexport type SearchResultSummary = {\n    truncated: boolean;\n    results: SearchResult[];\n};\n\nexport type SearchResult = {\n    name: string;\n    namespace: string;\n    features: string[];\n};\n\nexport type SearchQuery = string;\n\nexport interface ISearch {\n    For(query: SearchQuery): SearchResultSummary;\n}\n\nexport class SearchFactory {\n    static async Create(branch: string): Promise<ISearch> {\n        const url =\n            branch == 'local'\n                ? '/static/features.json'\n                : `https://raw.githubusercontent.com/microsoft/windows-rs/${branch}/crates/libs/windows/features.json`;\n\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error('Failed to fetch search index');\n        }\n\n        const data = await response.json();\n        return 'version' in data && data.version === 2 ? new SearchV2(data) : new SearchV1(data);\n    }\n}\n","/// <reference lib=\"webworker\" />\n\nimport { ISearch, SearchFactory, SearchResult } from './search';\n\ndeclare let self: ServiceWorkerGlobalScope;\n\nexport interface IWorkerMessage {\n    name: string;\n}\n\nexport interface IInitializeMessage extends IWorkerMessage {\n    branch: string;\n}\n\nexport interface ISearchMessage extends IWorkerMessage {\n    query: string;\n}\n\nexport interface ISearchResultMessage extends IWorkerMessage {\n    results: SearchResult[];\n    truncated: boolean;\n}\n\nexport interface IInitializeResultMessage extends IWorkerMessage {\n    result: boolean;\n}\n\nlet search: ISearch | undefined = undefined;\n\nself.onmessage = (ev: ExtendableMessageEvent) => {\n    const msg: IWorkerMessage = ev.data;\n    switch (msg.name) {\n        case 'initialize': {\n            const initMessage: IInitializeMessage = ev.data;\n            SearchFactory.Create(initMessage.branch).then((object) => {\n                search = object;\n                postMessage({\n                    name: 'initializeResult',\n                    result: true,\n                } as IInitializeResultMessage);\n            });\n            break;\n        }\n        default: {\n            if (search) {\n                const searchMessage: ISearchMessage = ev.data;\n                const summary = search.For(searchMessage.query);\n                postMessage({\n                    name: 'searchResult',\n                    results: summary.results,\n                    truncated: summary.truncated,\n                } as ISearchResultMessage);\n            }\n        }\n    }\n};\n"],"names":["sortSearchResults","results","query","sort","a","b","query_lower","toLowerCase","a_lower","name","b_lower","pos_a","indexOf","pos_b","length","SearchV1","constructor","searchIndex","this","_searchIndex","For","summary","truncated","undefined","Error","namespaces","namespace","item","full_namespace","namespace_map","Number","parseInt","replace","full_name","hit","RegExp","test","includes","features","map","idx","feature_map","filter","f","push","SearchV2","json","version","items","Object","fromEntries","entries","key","value","n","SearchFactory","Create","branch","url","response","fetch","ok","data","search","self","onmessage","ev","initMessage","then","object","postMessage","result","searchMessage"],"sourceRoot":""}